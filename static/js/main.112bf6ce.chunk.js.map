{"version":3,"sources":["components/InfoBox.js","components/colors.js","components/SmallCharts.js","components/CTable.js","components/util.js","components/Map.js","App.js","components/serviceWorker.js","index.js"],"names":["InfoBox","props","Card","onClick","className","active","color","CardContent","Typography","gutterBottom","title","cases","total","chartColors","SmallCharts","useState","newCaseWorldwide","setNewCaseWorldwide","pieData","setPieData","styles","pieContainer","width","height","position","relative","WWOptions","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","pieUSAData","responsive","labels","datasets","backgroundColor","hoverBackgroundColor","buildUSAData","oldArray","todayCases","todayDeaths","todayRecovered","console","log","buildWWData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","chartDataCases","fetchDataWW","fetchDataUSA","lineColor","lineBackgroundColor","style","length","borderColor","fontColor","fontSize","options","arc","borderWidth","CTable","countries","overflow","Table","striped","bordered","hover","variant","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","center","zoom","TileLayer","url","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","backgroundImage","flag","population","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","searchTerm","delayDebounceFn","setTimeout","clearTimeout","name","iso2","getCountriesData","onCountryChange_nav","key","countryCode","Navbar","collapseOnSelect","expand","bg","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","activeKey","NavDropdown","onSelect","e","Item","eventKey","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.112bf6ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nconst InfoBox = (props) => {\r\n\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${props.active && \"infoBox--selected\"} ${props.color==='blue' && \"infoBox--blue\"} \r\n      ${props.color==='red' && \"infoBox--red\"}`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {props.title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${props.color==='red' && \"infoBox__cases--red\"} ${props.color==='blue' && \"infoBox__cases--blue\"}` }>\r\n          {props.cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {props.total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","export const chartColors = [\r\n    \"#666666\",\r\n    \"#CC1034\",\r\n    \"#6699CC\",\r\n    \"#CCCCCC\",\r\n    \"#9999CC\",\r\n    \"#99CCFF\",\r\n    \"#999933\",\r\n    \"#666699\",\r\n    \"#CC9933\",\r\n    \"#006666\",\r\n    \"#3399FF\",\r\n    \"#993300\",\r\n    \"#CCCC99\",\r\n    \"#336699\",\r\n    \"#FFCC66\",\r\n    \"#663366\",\r\n    \"#669999\",\r\n    \"#CCCC66\",\r\n    \"#CC6600\",\r\n    \"#9999FF\",\r\n    \"#0066CC\",\r\n    \"#99CCCC\",\r\n    \"#999999\",\r\n    \"#FFCC00\",\r\n    \"#009999\",\r\n    \"#99CC33\",\r\n    \"#FF9900\",\r\n    \"#999966\",\r\n    \"#66CCCC\",\r\n    \"#339966\",\r\n    \"#CCCC33\",\r\n    \"#003f5c\",\r\n    \"#665191\",\r\n    \"#a05195\",\r\n    \"#d45087\",\r\n    \"#2f4b7c\",\r\n    \"#f95d6a\",\r\n    \"#ff7c43\",\r\n    \"#ffa600\",\r\n    \"#EF6F6C\",\r\n    \"#465775\",\r\n    \"#56E39F\",\r\n    \"#59C9A5\",\r\n    \"#5B6C5D\",\r\n    \"#0A2342\",\r\n    \"#2CA58D\",\r\n    \"#84BC9C\",\r\n    \"#CBA328\",\r\n    \"#F46197\",\r\n    \"#DBCFB0\",\r\n    \"#545775\"\r\n];\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Doughnut, Pie } from \"react-chartjs-2\";\r\nimport { chartColors } from \"./colors\";\r\nimport numeral from \"numeral\";\r\nimport \"./pieStyle.css\";\r\n\r\nconst SmallCharts = (props) => {\r\n  const [newCaseWorldwide, setNewCaseWorldwide] = useState([]);\r\n  const [deathWw, setDeathWw] = useState([]);\r\n\r\n  const [pieData, setPieData] = useState([]);\r\n\r\n  const styles = {\r\n    pieContainer: {\r\n      width: \"30%\",\r\n      height: \"30%\",\r\n      position: \"relative\",\r\n    },\r\n    relative: {\r\n      position: \"relative\"\r\n    }\r\n  };\r\n\r\n  const WWOptions = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const pieOptions = {\r\n    legend: { display: true, position: \"right\" },\r\n    elements: {\r\n      arc: {\r\n        borderWidth: 0\r\n      }\r\n    },\r\n  };\r\n\r\n  const pieUSAData = {\r\n    maintainAspectRatio: false,\r\n    responsive: false,\r\n    labels: [\"todayCases\", \"todayDeaths\", \"todayRecovered\"],\r\n    datasets: [\r\n      {\r\n        data: pieData,\r\n        backgroundColor: chartColors,\r\n        hoverBackgroundColor: chartColors\r\n      }\r\n    ]\r\n  };\r\n  const buildUSAData = (data) => {\r\n    setPieData([])\r\n    setPieData(oldArray => [...oldArray, data.todayCases])\r\n    setPieData(oldArray => [...oldArray, data.todayDeaths])\r\n    setPieData(oldArray => [...oldArray, data.todayRecovered])\r\n    console.log('why');\r\n    console.log(data.todayCases);\r\n    console.log(pieData);\r\n  }\r\n\r\n  const buildWWData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    console.log(data[casesType]);\r\n    for (let date in data[casesType]) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchDataWW = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            let chartDataCases = buildWWData(data, props.casesType);\r\n            console.log(chartDataCases);\r\n            setNewCaseWorldwide(chartDataCases);\r\n          });\r\n    };\r\n\r\n    fetchDataWW();\r\n\r\n  }, [props.casesType]);\r\n\r\n  useEffect(() => {\r\n    const fetchDataUSA = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries/usa\")\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            buildUSAData(data);\r\n          });\r\n    };\r\n\r\n    fetchDataUSA();\r\n  }, [])\r\n\r\n  let lineColor = \"\"\r\n  let lineBackgroundColor = \"\"\r\n  if (props.casesType === 'cases') {\r\n    lineColor = \"#666666\"\r\n    lineBackgroundColor = \"#CCCCCC\"\r\n  } else if (props.casesType === 'recovered') {\r\n    lineColor = \"#6699CC\"\r\n    lineBackgroundColor = \"#99CCFF\"\r\n  } else {\r\n    lineColor = \"#CC1034\"\r\n    lineBackgroundColor = \"#f95d6a\"\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <h3>Worldwide {props.casesType} last month</h3>\r\n        <div style={styles.relative}>\r\n          {newCaseWorldwide.length > 0 && (\r\n              <Line\r\n                  data={{\r\n                    datasets: [\r\n                      {\r\n                        label: \"New cases\",\r\n                        backgroundColor: lineBackgroundColor,\r\n                        borderColor: lineColor,\r\n                        data: newCaseWorldwide,\r\n                      },\r\n                    ],\r\n                  }}\r\n                  legend={{\r\n                    display: true,\r\n                    position: \"bottom\",\r\n                    labels: {\r\n                      fontColor: \"#323130\",\r\n                      fontSize: 14\r\n                    }\r\n                  }}\r\n                  options={WWOptions}\r\n              />\r\n          )}\r\n        </div>\r\n        <h3>Today in the United States</h3>\r\n\r\n        <div style={styles.pieContainer}>\r\n          <Pie\r\n              data={pieUSAData}\r\n              options={pieOptions}\r\n          />\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n  );\r\n\r\n};\r\nexport default SmallCharts;\r\n","import React from \"react\";\r\nimport \"./CTable.css\";\r\nimport numeral from \"numeral\";\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nfunction CTable({ countries }) {\r\n  return (\r\n    // <div className=\"table\">\r\n    //   {countries.map((country) => (\r\n    //     <tr>\r\n    //       <td>{country.country}</td>\r\n    //       <td>\r\n    //         <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n    //       </td>\r\n    //     </tr>\r\n    //   ))}\r\n    // </div>\r\n    <div style={{overflow: 'scroll'}}> \r\n    <Table striped bordered hover variant=\"dark\">\r\n       <thead>\r\n    <tr>\r\n      \r\n      <th>Country</th>\r\n      <th>Case Number</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {countries.map((country) => (\r\n      \r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n        \r\n        ))}\r\n      </tbody>\r\n      </Table>\r\n      </div>\r\n \r\n      \r\n\r\n\r\n  );\r\n}\r\n\r\nexport default CTable;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#999999\",\r\n    rgb: \"#999999\",\r\n    half_op: \"#666666\",\r\n    multiplier: 200,\r\n  },\r\n  recovered: {\r\n    hex: \"#99CCFF\",\r\n    rgb: \"#99CCFF\",\r\n    half_op: \"#6699CC\",\r\n    multiplier: 200,\r\n  },\r\n  deaths: {\r\n    hex: \"#f95d6a\",\r\n    rgb: \"#f95d6a\",\r\n    half_op: \"#CC1034\",\r\n    multiplier: 200,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-population\">\r\n            Population: {country.population}\r\n          </div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nconst Map = (props) => {\r\n    console.log(props.countries);\r\n    return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={props.center} zoom={props.zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {showDataOnMap(props.countries, props.casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport InfoBox from \"./components/InfoBox\";\r\nimport SmallCharts from \"./components/SmallCharts\";\r\nimport CTable from \"./components/CTable\";\r\nimport { sortData, prettyPrintStat } from \"./components/util\";\r\nimport numeral from \"numeral\";\r\nimport Map from \"./components/Map\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst App = () => {\r\n  const [country, setInputCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [countries, setCountries] = useState([]);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n\r\n  useEffect(() => {\r\n    const delayDebounceFn = setTimeout(() => {\r\n      // console.log(searchTerm)\r\n      // Send Axios request here\r\n    }, 3000)\r\n\r\n    return () => clearTimeout(delayDebounceFn)\r\n  }, [searchTerm])\r\n\r\n  useEffect(() => {\r\n      fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          let sortedData = sortData(data);\r\n          setCountries(countries);\r\n          setMapCountries(data);\r\n          setTableData(sortedData);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  // console.log(casesType);\r\n\r\n  const onCountryChange_nav = async (key) => {\r\n    const countryCode = key;\r\n    console.log('country Code: ',key);\r\n    console.log('country Code type: ',typeof countryCode);\r\n    console.log(key==='worldwide');\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n\r\n        \r\n        setInputCountry(countryCode);\r\n        setCountryInfo(data);\r\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n      }\r\n      );\r\n  };\r\n\r\n  const handleSelect=(key)=>{\r\n    \r\n    alert(`selected ${key}`);\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n    console.log('country Code: ',countryCode);\r\n    console.log('country Code type: ',typeof countryCode);\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n  \r\n        setInputCountry(countryCode);\r\n        setCountryInfo(data);\r\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        <div className=\"app__header\">\r\n       \r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Container>\r\n      <Navbar.Brand href=\"#home\">Covid-19 Data Visualization</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n\r\n      <Nav variant=\"pills\" activeKey=\"1\"  \r\n                >\r\n\r\n          <NavDropdown title=\"Case Type\" id=\"nav-dropdown\" onSelect={(e) => setCasesType(e)}>\r\n                  \r\n                  \r\n                  <NavDropdown.Item eventKey='cases'>Coronavirus Cases</NavDropdown.Item>\r\n                  <NavDropdown.Item eventKey=\"recovered\">Recovered</NavDropdown.Item>\r\n                  <NavDropdown.Item eventKey=\"deaths\">Deaths</NavDropdown.Item>\r\n                \r\n                </NavDropdown>\r\n                \r\n                \r\n                <NavDropdown title=\"Country\" id=\"nav-dropdown\" onSelect={onCountryChange_nav}>\r\n         \r\n                    {countries.map((country) => (\r\n                    <NavDropdown.Item eventKey={country.value}>{country.name}</NavDropdown.Item>\r\n                  ))}\r\n                    \r\n                </NavDropdown>\r\n            </Nav>\r\n\r\n            </Navbar.Collapse>\r\n      </Container>\r\n      </Navbar>\r\n      <Container>\r\n  <Row>\r\n    <Col><h3>Live Cases by Country</h3>\r\n            <CTable countries={tableData} /></Col>\r\n    <Col>{(() => {\r\n        if (casesType==='cases') {\r\n          return (\r\n            <InfoBox\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            title=\"Coronavirus Cases\"\r\n            active={casesType === \"cases\"}\r\n            cases={prettyPrintStat(countryInfo.todayCases)}\r\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\r\n            color=\"grey\"\r\n          />\r\n          )\r\n        } else if (casesType==='recovered') {\r\n          return (\r\n            <InfoBox\r\n            onClick={(e) => setCasesType(\"recovered\")}\r\n            title=\"Recovered\"\r\n            active={casesType === \"recovered\"}\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\r\n            color={\"blue\"}\r\n          />\r\n          )\r\n        } else {\r\n          return (\r\n            <InfoBox\r\n            onClick={(e) => setCasesType(\"deaths\")}\r\n            title=\"Deaths\"\r\n            active={casesType === \"deaths\"}\r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\r\n            color={\"red\"}\r\n          />\r\n          )\r\n        }\r\n      })()}\r\n      <Map\r\n          countries={mapCountries}\r\n          casesType={casesType}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n        />\r\n      </Col>\r\n  </Row>\r\n  </Container>\r\n  </div>\r\n</div>\r\n      <Card className=\"app__right\">\r\n        <CardContent>\r\n          <div className=\"app__information\">\r\n            {/* <h3>Live Cases by Country</h3>\r\n            <CTable countries={tableData} /> */}\r\n            <SmallCharts casesType={casesType} />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './components/serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}